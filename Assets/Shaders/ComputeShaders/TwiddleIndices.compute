#pragma kernel GenerateButterflyTexture
#include "ComplexOperations.hlsl"

RWTexture2D<float4> Result;
RWStructuredBuffer<int> indices; //bit reversed indices -> done in C# script
int N; //Width
static const float PI = 3.1415926;


[numthreads(1, 8, 1)]
void GenerateButterflyTexture(uint3 id : SV_DispatchThreadID)
{  
    //id.xy = current thread position
    float k = fmod((id.y * (N / pow(2, id.x + 1))), N);
    float2 twiddle = float2(cos(2.0  * PI * k / N), sin(2.0  * PI * k / N));
    int butterflyspan = int(pow(2, id.x));
    int butterflywing;
    if (fmod(id.y , pow(2, id.x + 1)) < pow(2, id.x))
    {
        butterflywing = 1;
    }
    else
        butterflywing = 0;
    
    //first stage bit reversed indices
    if (id.x == 0)
    {
        //top butterfly wing
        if (butterflywing == 1)
        {
            Result[id.xy] = float4(twiddle.x, twiddle.y, indices[id.y], indices[id.y + 1]);
        }
        //bottom butterfly wing
        else
            Result[id.xy] = float4(twiddle.x, twiddle.y, indices[id.y - 1], indices[id.y]);         
    } 
    // second to Log2(N) stage
    else
    {
        //top butterfly wing
        if (butterflywing == 1)
        {
            Result[id.xy] = float4(twiddle.x, twiddle.y, id.y, id.y + butterflyspan);
        }
        //bottom butterfly wing
        else
            Result[id.xy] = float4(twiddle.x, twiddle.y, id.y - butterflyspan, id.y);
    }     
}
