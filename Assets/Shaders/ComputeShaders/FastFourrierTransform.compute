// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HorizontalStepFFT
#pragma kernel VerticalStepFFT
#pragma kernel HorizontalStepInverseFFT
#pragma kernel VerticalStepInverseFFT
#pragma kernel Scale
#include "ComplexOperations.hlsl"

static const float PI = 3.1415926;
RWTexture2D<float4> butterflyTexture;
RWTexture2D<float2> Buffer1; //Pingpong texture 1
RWTexture2D<float2> Buffer0; //PingPong texture 2 

int Size;//size of the grid
int Step; //The current step of the FFT algorithm. At what level are we computing ?
bool PingPong;

[numthreads(8, 8, 1)]
void HorizontalStepFFT(uint3 id : SV_DispatchThreadID)
{
    float4 data = butterflyTexture[uint2(Step, id.x)];
    uint2 inputsIndices = (uint2) data.ba;
    if (PingPong)
    {
        Buffer1[id.xy] = Buffer0[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(data.rg, Buffer0[uint2(inputsIndices.y, id.y)]);
    }
    else
    {
        Buffer0[id.xy] = Buffer1[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(data.rg, Buffer1[uint2(inputsIndices.y, id.y)]);
    }
}

[numthreads(8, 8, 1)]
void VerticalStepFFT(uint3 id : SV_DispatchThreadID)
{
    float4 data = butterflyTexture[uint2(Step, id.y)];
    uint2 inputsIndices = (uint2) data.ba;
    if (PingPong)
    {
        Buffer1[id.xy] = Buffer0[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(data.rg, Buffer0[uint2(id.x, inputsIndices.y)]) / (Size * Size);
    }
    else
    {
        Buffer0[id.xy] = Buffer1[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(data.rg, Buffer1[uint2(id.x, inputsIndices.y)]) / (Size * Size);
    }
}

[numthreads(8, 8, 1)]
void HorizontalStepInverseFFT(uint3 id : SV_DispatchThreadID)
{
    float4 data = butterflyTexture[uint2(Step, id.x)];
    uint2 inputsIndices = (uint2) data.ba;
    if (PingPong)
    {
        Buffer1[id.xy] = Buffer0[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(float2(data.r, -data.g), Buffer0[uint2(inputsIndices.y, id.y)]);
    }
    else
    {
        Buffer0[id.xy] = Buffer1[uint2(inputsIndices.x, id.y)]
			+ ComplexMult(float2(data.r, -data.g), Buffer1[uint2(inputsIndices.y, id.y)]);
    }
}

[numthreads(8, 8, 1)]
void VerticalStepInverseFFT(uint3 id : SV_DispatchThreadID)
{
    float4 data = butterflyTexture[uint2(Step, id.y)];
    uint2 inputsIndices = (uint2) data.ba;
    if (PingPong)
    {
        Buffer1[id.xy] = Buffer0[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(float2(data.r, -data.g), Buffer0[uint2(id.x, inputsIndices.y)]);
    }
    else
    {
        Buffer0[id.xy] = Buffer1[uint2(id.x, inputsIndices.x)]
			+ ComplexMult(float2(data.r, -data.g), Buffer1[uint2(id.x, inputsIndices.y)]);
    }
}

[numthreads(8, 8, 1)]
void Scale(uint3 id : SV_DispatchThreadID)
{
    Buffer0[id.xy] = Buffer0[id.xy] / (Size*Size);
}






    




